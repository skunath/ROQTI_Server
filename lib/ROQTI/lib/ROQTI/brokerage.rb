class Brokerage

  def initialize(args)
    ###
    # Use this initializer to setup a brokerage house.
    # The brokerage house will have multiple accounts so you'll need a variable to manage that
    @name = args[:name]
    @accounts = [] # figure out how you would implement this
    @purchases = []
  end

  def add_account(account)
    @accounts << account
  end

  def current_assets
    for account in @accounts
      account.current_assets
    end
  end

  def purchase_value()
    purchase_value = 0
    for account in @accounts
      purchase_value += account.purchase_value
    end

    return purchase_value
  end

  def assets_under_management()
    # this will scan through all accounts and all assets associated and return the entire value of the brokerage.

    return total_assets
  end

  def total_returns()
    # this method should scan through all accounts/assets and determine the returns generated by the brokerage's trading plan

    returns = 0 # assume this is your temporary variable to store the returns
    for account in @accounts
      returns += account.total_returns() # notice that this will require the account class to have a new method for total_returns
      # look in the account class to see some ideas on how to implement total returns

    end
  end

  def gain_on_day(year, month, day)
    total_value = 0
    for account in @accounts
     total_value += account.gain_on_day(year, month, day)
    end

    puts "the total current value of the brokerage is: " 
    return total_value
    
  end

  def print_ranked_accounts_by_purchase_value()
    puts @accounts.sort_by {|account| account.purchase_value}

  end


end